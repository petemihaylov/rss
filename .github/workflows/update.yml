name: Update Dev News

on:
  schedule:
    - cron: '0 16 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Setup Action
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytz feedparser
      
      - name: Update the README
        run: |
          python - <<EOF
          import requests
          from datetime import datetime
          import pytz
          import feedparser
        
          def fetch_dev_news():
              response = requests.get("https://dev.to/api/articles?page=1&per_page=1&top=1")
              response.raise_for_status()
              article = response.json()[0]
              return f"- [{article['title']}]({article['url']}) by {article['user']['name']}"

          def fetch_medium_news():
              url = "https://medium.com/feed/tag/dotnet"
              feed = feedparser.parse(url)
          
              if not feed.entries:
                  return "No articles found."
          
              article = feed.entries[0]  # Latest article
              return f"- [{article.title}]({article.link}) by {article.author}"

          def update_readme(article_content):
              date_str = datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S UTC')
              
              try:
                  with open('README.md', 'r') as file:
                      current_content = file.read()
              except FileNotFoundError:
                  current_content = "# Daily Dev News\n\n"

              new_update = f"{date_str}\n{article_content}\n\n"
              final_content = new_update + current_content  # Append to the top

              with open('README.md', 'w') as file:
                  file.write(final_content)

          try:
              print("Fetching dev news...")
              article_content = fetch_medium_news()
              print("Updating README...")
              update_readme(article_content)
              print("Update completed successfully!")
          except Exception as e:
              print(f"Error occurred: {str(e)}")
              exit(1)
          EOF
      
      - name: Commit and Push changes
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          
          git add README.md
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Daily dev news update: $(date '+%Y-%m-%d')"
            git push
          fi
